library("shiny")
library("ggplot2")
library("dplyr")
# You will again be working with the `diamonds` data set provided by ggplot2
# Use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
diamonds_sample <- sample_n(diamonds, 1000)
# For convenience store the `range()` of values for the `price` column
# (of your sample)
diamond_range <- range(diamonds_sample)
View(diamonds_sample)
# For convenience store the `range()` of values for the `price` column
# (of your sample)
diamond_range <- range(diamonds_sample$price)
# For convenience, get a vector of column names from the `diamonds` data set to
# use as select inputs
col_names <- colnames(diamonds_sample)
col_names
diamond_range
# Define a variable `price_input` that is a `sliderInput()` with the following
# properties:
# - an inputId of `price_choice`
# - a label of "Price (in dollars)"
# - min and max valuesvalue based on the `price_range` calculated above
# - a current value equal to the price range
price_input <- sliderInput(inputId = "price_choice", label = "Price (in dollars)", min = diamond_range[1], max = diamond_range[2], value = diamond_range)
?selectInput()
# Define a variable `feature_input` that is a `selectInput()` with the
# label "Feature of Interest". This dropdown should let the user pick one of
# the columns of the diamond data set. Use the `carat` column as a default
# Make sure to set an inputId to reference in your server!
feature_input <- selectInput(inputId = "feature_input", label = "Feature of Interest", choices = col_names, selected = 'carat')
# Define a `server` function (with appropriate arguments)
# This function should perform the following:
my_server <- function(input_list, output_list)
# Define a UI using a `fluidPage()` layout with the following content:
my_ui <- fluidPage(
# A `titlePanel` with the title "Diamond Viewer"
titlePanel(title = "Diamond Viewer"),
# Your `prince_input`
price_input
# Your `feature_input`
# A `checkboxInput()` labeled "Show Trendline". It's default value is TRUE
# A plotOutput showing the 'plot' output (based on the user specifications)
)
# Create a new `shinyApp()` using the above ui and server
my_app <- shinyApp(my_ui, my_server)
# Define a UI using a `fluidPage()` layout with the following content:
my_ui <- fluidPage(
# A `titlePanel` with the title "Diamond Viewer"
titlePanel(title = "Diamond Viewer"),
# Your `prince_input`
price_input
# Your `feature_input`
# A `checkboxInput()` labeled "Show Trendline". It's default value is TRUE
# A plotOutput showing the 'plot' output (based on the user specifications)
)
# Create a new `shinyApp()` using the above ui and server
my_app <- shinyApp(my_ui, my_server)
runApp()
# Define a variable `price_input` that is a `sliderInput()` with the following
# properties:
# - an inputId of `price_choice`
# - a label of "Price (in dollars)"
# - min and max valuesvalue based on the `price_range` calculated above
# - a current value equal to the price range
price_input <- sliderInput(inputId = "price_choice", label = "Price (in dollars)", min = diamond_range[1], max = diamond_range[2], value = diamond_range)
# Define a variable `feature_input` that is a `selectInput()` with the
# label "Feature of Interest". This dropdown should let the user pick one of
# the columns of the diamond data set. Use the `carat` column as a default
# Make sure to set an inputId to reference in your server!
feature_input <- selectInput(inputId = "feature_input", label = "Feature of Interest", choices = col_names, selected = 'carat')
# Define a UI using a `fluidPage()` layout with the following content:
my_ui <- fluidPage(
# A `titlePanel` with the title "Diamond Viewer"
titlePanel(title = "Diamond Viewer"),
# Your `prince_input`
price_input,
# Your `feature_input`
feature_input
# A `checkboxInput()` labeled "Show Trendline". It's default value is TRUE
# A plotOutput showing the 'plot' output (based on the user specifications)
)
# Create a new `shinyApp()` using the above ui and server
my_app <- shinyApp(my_ui, my_server)
runApp()
# Define a UI using a `fluidPage()` layout with the following content:
my_ui <- fluidPage(
# A `titlePanel` with the title "Diamond Viewer"
titlePanel(title = "Diamond Viewer"),
# Your `prince_input`
price_input,
# Your `feature_input`
feature_input,
# A `checkboxInput()` labeled "Show Trendline". It's default value is TRUE
trendline_input <- checkboxInput(inputId = "show_trend", label = "Show Trendline", value = TRUE)
# A plotOutput showing the 'plot' output (based on the user specifications)
)
# Define a UI using a `fluidPage()` layout with the following content:
my_ui <- fluidPage(
# A `titlePanel` with the title "Diamond Viewer"
titlePanel(title = "Diamond Viewer"),
# Your `prince_input`
price_input,
# Your `feature_input`
feature_input,
# A `checkboxInput()` labeled "Show Trendline". It's default value is TRUE
trendline_input <- checkboxInput(inputId = "show_trend", label = "Show Trendline", value = TRUE),
# A plotOutput showing the 'plot' output (based on the user specifications)
plotOutput(outputId = "plot")
)
# Define a UI using a `fluidPage()` layout with the following content:
my_ui <- fluidPage(
titlePanel(title = "Diamond Viewer"),
price_input,
feature_input,
trendline_input <- checkboxInput(inputId = "show_trend", label = "Show Trendline", value = TRUE),
plotOutput(outputId = "plot")
)
# Define a `server` function (with appropriate arguments)
# This function should perform the following:
my_server <- function(input_list, output_list) {
}
# Create a new `shinyApp()` using the above ui and server
my_app <- shinyApp(my_ui, my_server)
runApp()
filtered_data <- diamonds_sample %>%
})
# Define a variable `feature_input` that is a `selectInput()` with the
# label "Feature of Interest". This dropdown should let the user pick one of
# the columns of the diamond data set. Use the `carat` column as a default
# Make sure to set an inputId to reference in your server!
feature_input <- selectInput(inputId = "feature_choice", label = "Feature of Interest", choices = col_names, selected = 'carat')
install.packages('rsconnect')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='michaelgraham', token='78F116474A4F14BE2EC8335E05F524BD', secret='xV0GZr7xbgY00WulQeHlxvArzQ4ONojQpfrltrS5')
runApp()
